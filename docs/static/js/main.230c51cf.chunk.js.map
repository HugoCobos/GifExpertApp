{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItems.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifItems","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","categories","setCategories","categoria","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAApBC,EAAmB,EAAnBA,YAG3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,qCACA,uDACA,sBAAMC,SAfW,SAAAC,GAEjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAa,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OAErCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAxBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,gB,+BCTjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUH,GAF7C,8DAIII,MAAOF,GAJX,cAIdG,EAJc,gBAMGA,EAAUC,OANb,uBAMZC,EANY,EAMZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZtB,kBAgBbM,GAhBa,4CAAH,sDCCRO,EAAW,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC/B,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCDJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECNwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAd,GAGHe,YAAY,WACRH,EAAS,CACLf,KAAMG,EACNU,SAAQ,MAGb,UAGZ,CAAEpB,IAEEqB,EDjB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAIrB,OACI,qCACI,oBAAIJ,UAAU,qCAAd,SAAoDhB,IACpD,oBAAIgB,UAAU,mCAAd,SAAmDI,GAAW,8CAC9D,qBAAKJ,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAGKA,GAFCA,EAAIC,aEfrBgB,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmBC,EAAnB,KASA,OACI,qCACA,8CAEA,cAAC,EAAD,CAAa5C,YAAc4C,IAC3B,uBAEA,6BAEQD,EAAWnB,KAAK,SAAAqB,GAAS,OAAI,cAAC,EAAD,CAEzB9B,SAAU8B,GADLA,Y,MCpBzBC,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.230c51cf.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n// Recibimos el setCategory del arreglo en GifExpertApp\r\nexport const AddCategory = ( { setCategory } ) => {\r\n    // useState es para asignar un valor y con el setState hace que renderice el DOM \r\n    // cada que hay un cambio y ese mismo se le asigna, en este caso tambien anexa el valor\r\n    const [InputValue, setInputValue] = useState('');\r\n\r\n    // funcion para que el input cambine, o sea, que cada letra se vaya anexando\r\n    const handleChangeInput = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    // funcion para el submit del formulario, se le anexa al setCategory el valor que entro al formulario\r\n    const handleSubmit = e => {\r\n        // hacemos que el evento del form no renderice la pagina\r\n        e.preventDefault();\r\n        // validamos que no tenga espacios vacios y que el minimo de caracteres sea de 2\r\n        if (InputValue.trim().length > 2) {\r\n            // se hace una capio del valor original y como segundo parametro se le anexa el valor que mandaron por el form\r\n            setCategory( cat => [ InputValue, ...cat] );\r\n            // cuando todo se cumple el input queda vacio\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <h3>Ingresa una categoria</h3>\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={InputValue}\r\n                onChange={ handleChangeInput }\r\n            />\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n// hacemos que sea requerido el argumento que ocupa la funcion principal (AddCatgory)\r\nAddCategory.propTypes ={\r\n    setCategory:PropTypes.func.isRequired \r\n}","\r\n export const getGift = async( category ) => {\r\n    //  guardamos la busqueda en una variable y se le asigna la categoria a buscar\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=35gH0cOwU1Pqat7FPOv9DF8ODrlL5Ky3`;\r\n    // hacemos el fetch\r\n    const respuesta = await fetch( url );\r\n    // destructuramos la data de la respuesta del fetch\r\n    const { data } = await respuesta.json();\r\n    // recorremos el arreglo y regresamos los datos que nos interesan en objeto\r\n    const gifs = data.map( img  =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    //le pasamos el arreglo al arreglo vacio del images (se encuentra en el useState)\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifItems = ( { title, url} ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__backInDown\">\r\n            <img src={url} alt={title}  />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nimport { GifItems } from './GifItems';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n    // los dos puntos en la desestructuracion es para cambiar el nombre, \r\n    // no para usar algun argumento ni nada, solo renombra\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__flipInX\">{category}</h3>\r\n            <h4 className=\"animate__animated animate__flash\">{ loading && <p>Cargando...</p> }</h4>\r\n            <div className=\"card-grid\">\r\n                {\r\n                    // hay que hacer un mapeo (foreach) para que haga el ciclo del array pero aqui llamamos el GifItems para que se muestren de otra forma\r\n                    images.map( ( img ) => (\r\n                        <GifItems \r\n                        key={ img.id }\r\n                        // mandamos con el operador spread para que al momento de que se reciba en el otro componente se haga la desestructuracion\r\n                        { ...img } />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGift } from '../helpers/getGifs'\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n // useEffect aqui nos serve para que cuando haya un cambio en el DOM no vuelva a hacer la peticion del fetch\r\n    useEffect( () => {\r\n\r\n        getGift( category )\r\n            .then( img => {\r\n                // le asignamos segundos de carga\r\n                // console.log(img)\r\n                setTimeout( () => {\r\n                    setState({\r\n                        data: img,\r\n                        loading:false,\r\n                    })\r\n\r\n                }, 300 );\r\n\r\n            } )\r\n    }, [ category ])\r\n\r\n    return state; // {data: [], loading: true}\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//apiKye = '35gH0cOwU1Pqat7FPOv9DF8ODrlL5Ky3';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['Dragon Ball', 'Sword Art Online', 'Gobling Slayer'];\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // Para hacer un push o sea agregar un nuevo elemento al arreglo seria de la siguientes formas\r\n    //     // setCategories( [...categories, 'SAO'] )\r\n    //     setCategories( cat => [...cat, 'SAO'] );\r\n\r\n    // }\r\n\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        {/* llamamos el componente y le pasamos el setCategory que sirve para anexar el valor del input en el component principal */}\r\n        <AddCategory setCategory={ setCategories }/>\r\n        <hr />\r\n        {/* hacemos una lista ordenada de las categories */}\r\n        <ol>\r\n            {\r\n                categories.map( categoria => <GifGrid \r\n                    key={categoria}\r\n                    category={categoria}\r\n                    />)\r\n            }\r\n        </ol>\r\n    </>\r\n        );\r\n    };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n// import { NumberList } from './key';\n\nReactDOM.render(\n    //<NumberList numbers={numbers} />,\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}